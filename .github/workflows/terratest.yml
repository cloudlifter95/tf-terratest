name: Terratest Unit Tests
on: push
permissions:
  contents: read
  packages: write
  actions: write

jobs:
  go-tests:
    name: Run Go Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # env: NODE_TLS_REJECT_UNAUTHORIZED=0
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        # env:
        #   NODE_TLS_REJECT_UNAUTHORIZED=0
        with:
          terraform_version: "1.5.7"
      # - name: Determine architecture
      #   id: determine_arch
      #   run: echo "arch=\"$(uname -m)\"" >> "$GITHUB_OUTPUT"
      # - name: Set architecture
      #   id: set_arch
      #   run: |
      #     ARCH="${{ steps.determine_arch.outputs.arch }}"
      #     case $ARCH in
      #       "x86_64")
      #         ARCH="amd64"
      #         ;;
      #       "i386")
      #         ARCH="386"
      #         ;;
      #       "armv6l")
      #         ARCH="arm"
      #         ;;
      #       "armv7l")
      #         ARCH="arm"
      #         ;;
      #       "aarch64")
      #         ARCH="arm64"
      #         ;;
      #       *)
      #         echo "Unsupported architecture: $ARCH"
      #         exit 1
      #         ;;
      #     esac
      #     echo "arch=\"$ARCH\"" >> "$GITHUB_OUTPUT"
      # - env:
      #     TMPDIR: ${{ runner.temp }}
      #   run: |
      #     # Set desired Terraform version
      #     TERRAFORM_VERSION="1.5.7"
      #     # Get architecture from previous step
      #     ARCH=$(echo "${{ steps.set_arch.outputs.arch }}")
      #     echo $ARCH
      #     # Download Terraform binary without SSL verification
      #     curl -k -LO "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_${ARCH}.zip"
      #     echo "done"
      #     # ls
      #     unzip -o -qq -d $TMPDIR terraform_${TERRAFORM_VERSION}_linux_${ARCH}.zip
      #     mv $TMPDIR/terraform /usr/local/bin/
      #     terraform version
      - uses: actions/setup-go@v5
        # env:
        #   NODE_TLS_REJECT_UNAUTHORIZED=0
        with:
          go-version: "1.22.2"
      - name: Download Go Modules
        run: go mod download
      - name: Run Go Tests
        working-directory: tests
        run: go test -v -tags=unit > terratest-results.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: tests/terratest-results.txt
      # tfsec
      - name: tfsec
        uses: tfsec/tfsec-sarif-action@master
        with:
          sarif_file: tfsec.sarif
      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     # Path to SARIF file relative to the root of the repository
      #     sarif_file: tfsec.sarif
      - name: Upload TFSEC Results
        uses: actions/upload-artifact@v2
        with:
          name: tfsec.sarif
          path: tfsec.sarif
